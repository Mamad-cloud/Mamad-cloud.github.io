{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _toConsumableArray from\"/home/mamad/paractice/react/burger-builder-1.0/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React,{useEffect}from'react';import BurgerIngredient from'./BurgerIngredient/BurgerIngredient';import classes from'./Burger.module.css';import Aux from'../../hoc/Aux/Aux';var Burger=function Burger(props){var ingredients_arr=Object.keys(props.ingredients).map(function(ingrKey){return _toConsumableArray(Array(props.ingredients[ingrKey])).map(function(_,idx){return/*#__PURE__*/_jsx(BurgerIngredient,{type:ingrKey},ingrKey+idx);});}).reduce(function(prevVal,currVal){return prevVal.concat(currVal);},[]);// Another Approach would be to use the flat() method which works as well\n// const ingredients_arr = Object.keys(props.ingredients).map(ingrKey => {\n//     return [...Array(props.ingredients[ingrKey])].map((_, idx) => {\n//         return <BurgerIngredient key={ingrKey + idx} type={ingrKey} />\n//     });\n// }).flat();\nvar burgerIngredients=null;if(ingredients_arr.length===0){burgerIngredients=/*#__PURE__*/_jsxs(Aux,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"You Just Want Buns?!\"}),/*#__PURE__*/_jsx(\"h4\",{children:\"Add your ingredients down below in the Controls\"})]});}else{burgerIngredients=_toConsumableArray(ingredients_arr);}useEffect(function(){},[]);return/*#__PURE__*/_jsxs(\"div\",{className:classes.Burger,children:[/*#__PURE__*/_jsx(BurgerIngredient,{type:\"bread-top\"}),burgerIngredients,/*#__PURE__*/_jsx(BurgerIngredient,{type:\"bread-bottom\"})]});};export default Burger;","map":{"version":3,"sources":["/home/mamad/paractice/react/burger-builder-1.0/src/Components/Burger/Burger.js"],"names":["React","useEffect","BurgerIngredient","classes","Aux","Burger","props","ingredients_arr","Object","keys","ingredients","map","ingrKey","Array","_","idx","reduce","prevVal","currVal","concat","burgerIngredients","length"],"mappings":"iOAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CAEA,MAAOC,CAAAA,gBAAP,KAA6B,qCAA7B,CACA,MAAOC,CAAAA,OAAP,KAAoB,qBAApB,CACA,MAAOC,CAAAA,GAAP,KAAgB,mBAAhB,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,CAAI,CAEpB,GAAMC,CAAAA,eAAe,CAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EAA+BC,GAA/B,CAAmC,SAAAC,OAAO,CAAI,CAClE,MAAO,oBAAIC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,OAAlB,CAAD,CAAT,EAAuCD,GAAvC,CAA2C,SAACG,CAAD,CAAIC,GAAJ,CAAY,CAC1D,mBAAO,KAAC,gBAAD,EAAsC,IAAI,CAAEH,OAA5C,EAAuBA,OAAO,CAAGG,GAAjC,CAAP,CACH,CAFM,CAAP,CAGH,CAJuB,EAIrBC,MAJqB,CAId,SAACC,OAAD,CAAUC,OAAV,CAAsB,CAC5B,MAAOD,CAAAA,OAAO,CAACE,MAAR,CAAeD,OAAf,CAAP,CACH,CANuB,CAMrB,EANqB,CAAxB,CAQA;AACA;AACA;AACA;AACA;AACA;AAGA,GAAIE,CAAAA,iBAAiB,CAAG,IAAxB,CAEA,GAAGb,eAAe,CAACc,MAAhB,GAA2B,CAA9B,CAAiC,CAC7BD,iBAAiB,cACb,MAAC,GAAD,yBACI,4CADJ,cAEI,uEAFJ,GADJ,CAMH,CAPD,IAOO,CACHA,iBAAiB,oBAAOb,eAAP,CAAjB,CACH,CAEDN,SAAS,CAAC,UAAM,CAEf,CAFQ,CAEN,EAFM,CAAT,CAKA,mBAEI,aAAK,SAAS,CAAEE,OAAO,CAACE,MAAxB,wBACE,KAAC,gBAAD,EAAkB,IAAI,CAAC,WAAvB,EADF,CAEGe,iBAFH,cAGE,KAAC,gBAAD,EAAkB,IAAI,CAAC,cAAvB,EAHF,GAFJ,CAUH,CA9CD,CAoDA,cAAef,CAAAA,MAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\nimport classes from './Burger.module.css';\nimport Aux from '../../hoc/Aux/Aux';\n\nconst Burger = props => {\n\n    const ingredients_arr = Object.keys(props.ingredients).map(ingrKey => {\n        return [...Array(props.ingredients[ingrKey])].map((_, idx) => {\n            return <BurgerIngredient key={ingrKey + idx} type={ingrKey} />\n        });\n    }).reduce((prevVal, currVal) => {\n        return prevVal.concat(currVal);\n    }, []);\n\n    // Another Approach would be to use the flat() method which works as well\n    // const ingredients_arr = Object.keys(props.ingredients).map(ingrKey => {\n    //     return [...Array(props.ingredients[ingrKey])].map((_, idx) => {\n    //         return <BurgerIngredient key={ingrKey + idx} type={ingrKey} />\n    //     });\n    // }).flat();\n\n\n    let burgerIngredients = null;\n    \n    if(ingredients_arr.length === 0) {\n        burgerIngredients = (\n            <Aux>\n                <h3>You Just Want Buns?!</h3>\n                <h4>Add your ingredients down below in the Controls</h4>\n            </Aux>\n        );\n    } else {\n        burgerIngredients = [...ingredients_arr];\n    }\n\n    useEffect(() => {\n        \n    }, []);\n\n\n    return (\n      \n        <div className={classes.Burger}>\n          <BurgerIngredient type=\"bread-top\" />\n          {burgerIngredients}\n          <BurgerIngredient type=\"bread-bottom\" />\n        </div>\n      \n    );\n\n}\n\nBurger.propTypes = {\n    ingredients: PropTypes.object.isRequired,\n}\n\nexport default Burger;"]},"metadata":{},"sourceType":"module"}